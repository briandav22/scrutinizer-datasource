{"version":3,"sources":["../src/reportData.js"],"names":["_","ScrutinizerJSON","authToken","reportType","startTime","endTime","ipAddress","reportDirection","expInterface","reportFilter","exporterInterface","scrutFilters","sdfDips_0","filterJson","JSON","parse","key","hasOwnProperty","scrutParams","rm","action","rpt_json","stringify","reportTypeLang","reportDirections","selected","times","dateRange","start","end","filters","dataGranularity","data_requested","graph","table","query_limit","offset","max_num_rows","url","method","params","view","session_state","client_time_zone","order_by","search","column","value","comparison","data","filterType","_key","hostDisplayType","report_data","clientTimezone","oneCollectorRequest","type","Handledata","rearrangeData","arr","oldIndex","newIndex","old_index","length","new_index","k","push","undefined","splice","scrutData","intervalTime","datatoGraph","graphingData","i","j","graphData","tableData","target","datapoints"],"mappings":"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","file":"reportData.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class ScrutinizerJSON {\r\n  constructor() {}\r\n\r\n  createParams(\r\n    authToken,\r\n    reportType,\r\n    startTime,\r\n    endTime,\r\n    ipAddress,\r\n    reportDirection,\r\n    expInterface,\r\n    reportFilter\r\n  ) {\r\n    let exporterInterface;\r\n    let scrutFilters;\r\n\r\n    if (expInterface === \"allInterfaces\") {\r\n      exporterInterface = \"_ALL\";\r\n    } else {\r\n      exporterInterface = \"-\" + expInterface;\r\n    }\r\n\r\n    //  if user wants all devices, then they are defualted to all interfaces\r\n    if (ipAddress === \"allExporters\") {\r\n      scrutFilters = {\r\n        sdfDips_0: `in_GROUP_ALL`\r\n      };\r\n    } else {\r\n      // if user wants a specific device, they can either have ALL interfaces, or a specific interface\r\n      if (exporterInterface === \"_ALL\") {\r\n        scrutFilters = {\r\n          sdfDips_0: `in_${ipAddress}_ALL`\r\n        };\r\n      } else {\r\n        scrutFilters = {\r\n          sdfDips_0: `in_${ipAddress}_${ipAddress}${exporterInterface}`\r\n        };\r\n      }\r\n    }\r\n    //if user is adding filters to the report.\r\n    if (reportFilter !== \"No Filter\") {\r\n      let filterJson = JSON.parse(reportFilter);\r\n      for (var key in filterJson) {\r\n        if (filterJson.hasOwnProperty(key)) {\r\n          if (key != \"sdfDips_0\") {\r\n            scrutFilters[key] = filterJson[key];\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      authToken,\r\n      reportType,\r\n      startTime,\r\n      endTime,\r\n      ipAddress,\r\n      reportDirection,\r\n      expInterface: exporterInterface,\r\n      scrutFilters\r\n    };\r\n  }\r\n\r\n  reportJSON(scrutParams) {\r\n    //returning report params to be passed into request\r\n    return {\r\n      rm: \"report_api\",\r\n      action: \"get\",\r\n      authToken: scrutParams.authToken,\r\n      rpt_json: JSON.stringify({\r\n        reportTypeLang: scrutParams.reportType,\r\n        reportDirections: {\r\n          selected: scrutParams.reportDirection\r\n        },\r\n        times: {\r\n          dateRange: \"Custom\",\r\n          start: `${scrutParams.startTime}`,\r\n          end: `${scrutParams.endTime}`\r\n        },\r\n        filters: scrutParams.scrutFilters,\r\n        dataGranularity: {\r\n          selected: \"auto\"\r\n        }\r\n      }),\r\n\r\n      data_requested: {\r\n        [scrutParams.reportDirection]: {\r\n          graph: \"all\",\r\n          table: {\r\n            query_limit: {\r\n              offset: 0,\r\n              max_num_rows: 10\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  interfaceJSON(url, authToken, ipAddress) {\r\n    //params to figure out which interfaces exist for a device\r\n    return {\r\n      url,\r\n      method: \"get\",\r\n      params: {\r\n        rm: \"status\",\r\n        action: \"get\",\r\n        view: \"topInterfaces\",\r\n        authToken: authToken,\r\n        session_state: {\r\n          client_time_zone: \"America/New_York\",\r\n          order_by: [],\r\n          search: [\r\n            {\r\n              column: \"exporter_search\",\r\n              value: `${ipAddress}`,\r\n              comparison: \"like\",\r\n              data: { filterType: \"multi_string\" },\r\n              _key: `exporter_search_like_${ipAddress}`\r\n            }\r\n          ],\r\n          query_limit: { offset: 0, max_num_rows: 50 },\r\n          hostDisplayType: \"dns\"\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  findtimeJSON(scrutParams) {\r\n    //params to figure out which interval your in based on data you are requesting\r\n    return {\r\n      rm: \"report_start\",\r\n      authToken: scrutParams.authToken,\r\n      report_data: {\r\n        parse: true,\r\n        reportDirections: { selected: `${scrutParams.reportDirection}` },\r\n        reportTypeLang: `${scrutParams.reportType}`,\r\n        times: {\r\n          dateRange: \"Custom\",\r\n          start: `${scrutParams.startTime}`,\r\n          end: `${scrutParams.endTime}`,\r\n          clientTimezone: \"America/New_York\"\r\n        },\r\n        filters: scrutParams.scrutFilters,\r\n        dataGranularity: { selected: \"auto\" },\r\n        oneCollectorRequest: false\r\n      }\r\n    };\r\n  }\r\n\r\n  exporterJSON(url, authToken) {\r\n    //params to figure out which exporters are available to pick from.\r\n    return {\r\n      url,\r\n      method: \"GET\",\r\n      params: {\r\n        rm: \"get_known_objects\",\r\n        type: \"devices\",\r\n        authToken\r\n      }\r\n    };\r\n  }\r\n}\r\nexport class Handledata {\r\n  //scrutinizer returns graph data opposite of how grafana wants it. So we flip it here.\r\n  constructor() {\r\n    this.rearrangeData = (arr, oldIndex, newIndex) => {\r\n      while (oldIndex < 0) {\r\n        old_index += arr.length;\r\n      }\r\n      while (newIndex < 0) {\r\n        new_index += arr.length;\r\n      }\r\n      if (newIndex >= arr.length) {\r\n        let k = newIndex - arr.length;\r\n\r\n        while (k-- + 1) {\r\n          arr.push(undefined);\r\n        }\r\n      }\r\n      arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\r\n      return arr;\r\n    };\r\n  }\r\n\r\n  formatData(scrutData, reportDirection, intervalTime) {\r\n    //grafana wants time in millaseconds. so we multiple by 1000.\r\n    //we also want to return data in bits, so we device by 8\r\n    let datatoGraph = [];\r\n    let graphingData = scrutData;\r\n    let i,\r\n      j = 0;\r\n    let graphData = graphingData[\"report\"][\"graph\"][\"pie\"][reportDirection];\r\n    let tableData =\r\n      graphingData[\"report\"][\"graph\"][\"timeseries\"][reportDirection];\r\n    for (i = 0; i < tableData.length; i++) {\r\n      for (j = 0; j < tableData[i].length; j++) {\r\n        tableData[i][j][0] = tableData[i][j][0] * 1000;\r\n        tableData[i][j][1] = (tableData[i][j][1] * 8) / (intervalTime * 60);\r\n        this.rearrangeData(tableData[i][j], 0, 1);\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < graphData.length; i++) {\r\n      datatoGraph.push({\r\n        target: graphData[i][\"label\"],\r\n        datapoints: tableData[i]\r\n      });\r\n    }\r\n\r\n    return datatoGraph;\r\n  }\r\n}\r\n"]}